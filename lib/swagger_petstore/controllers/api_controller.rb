# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SwaggerPetstore
  # APIController
  class APIController < BaseController
    @instance = APIController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # Creates a new pet in the store.  Duplicates are allowed
    # @param [NewPet] body Required parameter: Pet to add to the store
    # @return Pet response from the API call
    def add_pet(body)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/pets'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)

      # Validate response against endpoint and global error codes.
      unless _context.response.status_code.between?(200, 208)
        raise ErrorException.new(
          'unexpected error',
          _context
        )
      end
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      Pet.from_hash(decoded)
    end

    # deletes a single pet based on the ID supplied
    # @param [Long] id Required parameter: ID of pet to delete
    # @return void response from the API call
    def delete_pet(id)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/pets/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'id' => id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = @http_client.delete(
        _query_url
      )
      _context = execute_request(_request)

      # Validate response against endpoint and global error codes.
      unless _context.response.status_code.between?(200, 208)
        raise ErrorException.new(
          'unexpected error',
          _context
        )
      end
      validate_response(_context)
    end

    # Returns all pets from the system that the user has access to
    # Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem
    # sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio
    # lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis,
    # pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea
    # dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra
    # tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit
    # non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat
    # venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim
    # enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor,
    # consectetur non augue vel, vehicula interdum libero. Morbi euismod
    # sagittis libero sed lacinia.
    # Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu
    # condimentum ligula luctus nec. Phasellus semper velit eget aliquet
    # faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem
    # id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio.
    # Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et
    # sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel
    # tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis
    # gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi.
    # Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem.
    # Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.
    # @param [List of String] tags Optional parameter: tags to filter by
    # @param [Integer] limit Optional parameter: maximum number of results to
    # return
    # @return List of Pet response from the API call
    def find_pets(tags = nil,
                  limit = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/pets'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'tags' => tags,
        'limit' => limit,
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      _context = execute_request(_request)

      # Validate response against endpoint and global error codes.
      unless _context.response.status_code.between?(200, 208)
        raise ErrorException.new(
          'unexpected error',
          _context
        )
      end
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      decoded.map { |element| Pet.from_hash(element) }
    end

    # Returns a user based on a single ID, if the user does not have access to
    # the pet
    # @param [Long] id Required parameter: ID of pet to fetch
    # @return Pet response from the API call
    def find_pet_by_id(id)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/pets/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'id' => id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      _context = execute_request(_request)

      # Validate response against endpoint and global error codes.
      unless _context.response.status_code.between?(200, 208)
        raise ErrorException.new(
          'unexpected error',
          _context
        )
      end
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      Pet.from_hash(decoded)
    end
  end
end
